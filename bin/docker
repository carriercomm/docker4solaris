#!/usr/bin/bash


#
# Doker for Solaris 11.2
#
#    Date: __RELEASE_DATE__
# Version: __VERSION__
#
# maduma@pt.lu
#
# timing value for i386 2511MHz
# 


# INSTALLDIR
INSTALLDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd | sed 's#/bin##')

# settings
REPO=$INSTALLDIR/repo
IMAGES=$INSTALLDIR/images
PROFILES=$INSTALLDIR/profiles
MANIFESTS=$INSTALLDIR/manifests
MILESTONE=multi-user-server
IMAGETAG=DI_
CONTAINERTAG=DC_
LASTCONTAINER=/tmp/lastcontainer


# create internal network for docker + nat
if [ ! -f /etc/ipf/ipnat.conf ]; then
	echo "Enabling networking for docker"
	echo "map net0 10.0.0.0/24 -> 0/32" > /etc/ipf/ipnat.conf
fi
dladm show-etherstub dockerint0 >/dev/null 2>&1 || dladm create-etherstub dockerint0
dladm show-vnic dockergate0 >/dev/null 2>&1 || dladm create-vnic -l dockerint0 dockergate0
ipadm show-if dockergate0 >/dev/null 2>&1 || ipadm create-ip dockergate0
ipadm show-addr -po addr,state dockergate0 | grep -q "10.0.0.1/24:ok" || \
	ipadm create-addr -T static -a 10.0.0.1/24 dockergate0
[ "$( ipadm show-prop -c -o current -p forwarding ipv4 )" == "on" ] || \
	ipadm set-prop -p forwarding=on ipv4
pkg list isc-dhcp >/dev/null 2>&1 || pkg install isc-dhcp >/dev/null 2>&1
if [ ! -f /etc/inet/dhcpd4.conf ]; then
	cat > /etc/inet/dhcpd4.conf <<EOF
option domain-name "docker.internal";
option domain-name-servers 8.8.8.8;
subnet 10.0.0.0 netmask 255.255.255.0 {
	range 10.0.0.2 10.0.0.254;
	option routers 10.0.0.1;
}
EOF
fi
[ "$( svcs -H -o state ipfilter )" == "online" ] || svcadm enable -s ipfilter
[ "$( svcs -H -o state dhcp/server:ipv4 )" == "online" ] || svcadm enable -s dhcp/server:ipv4

# generate learn/tutorial archive
[ ! -d $REPO -o ! -d $IMAGES ] && mkdir -p $REPO $IMAGES
[ ! -d $REPO/learn ] && mkdir $REPO/learn
if [ ! -f $REPO/learn/tutorial.desc ]; then
	echo "An image for the interactive tutorial" > $REPO/learn/tutorial.desc
fi
if [ ! -f $REPO/learn/tutorial.uar ]; then
	echo "Creating the image learn/tutorial in the repository (200 sec)"
	zonecfg -z ${IMAGETAG}tutorial create
	zoneadm -z ${IMAGETAG}tutorial install -m $MANIFESTS/solaris-minimal-server.xml
	archiveadm create -z ${IMAGETAG}tutorial -e $REPO/learn/tutorial.uar
	zoneadm -z ${IMAGETAG}tutorial uninstall -F
	zonecfg -z ${IMAGETAG}tutorial delete -F
fi

# helper functions
function dockerid2zonename {
	IMAGE=$1
	echo "$IMAGETAG$( echo $IMAGE | tr -s '/' '_' | cut -f1 -d.)"
}

function wait_online {
	ZONENAME=$1
	SVC=$2
	until [ "$STATE" == "online" ]; do
		sleep 5
		STATE=$( zlogin $1 svcs -Ho state $SVC 2>/dev/null)
	done
}

# docker cli
case "$1" in
	version)
		echo "Docker for Solaris version 0.0.1"
		;;
	images)
		ls $IMAGES | grep "\.uar$" | sed 's/^DI_//' | tr -s '_' '/' | cut -f1 -d.
		;;
	search)
		[ -z "$2" ] && exit 1
		IMAGES=$( find $REPO -name "*.uar" | sed "s#^$REPO/##" | cut -f1 -d. | grep $2 )
		[ -z "$IMAGES" ] && exit 0
		IMAGESNBR=$( echo "$IMAGES" | wc -l )
		echo Found $IMAGESNBR results matching your query \(\"$2\"\)
		echo "NAME                      DESCRIPTION"
		for IMAGE in $IMAGES; do
			printf "%-25s %s\n" $IMAGE "`cat $REPO/$IMAGE.desc`"
		done
		;;
	pull)
		[ -z "$2" ] && exit 1
		IMAGE=$2
		ZONENAME=`dockerid2zonename $IMAGE`
		# copy the image localy
		echo "Pulling repository $IMAGE"
		[ ! -f $IMAGES/$ZONENAME.uar ] && cp -r $REPO/$IMAGE.uar $IMAGES/$ZONENAME.uar && \
			echo "Pulling image $ZONENAME.uar"
		[ ! -f $IMAGES/$ZONENAME.desc ] && cp -r $REPO/$IMAGE.desc $IMAGES/$ZONENAME.desc && \
			echo "Pulling description $ZONENAME.desc"
		;;
	run)
		# use -d option to prevent zone to shutdown after the command return
		[ -z "$2" -o -z "$3" ] && exit 1
		if [ "$2" == "-d" ]; then
			[ -z "$4" ] && exit 1
			DEAMON="True"
			IMAGE=$3
			shift 3
		else
			IMAGE=$2
			shift 2
		fi
		CLONESRC=`dockerid2zonename $IMAGE`
		# give a random name to the zon
		ZONENAME="$CONTAINERTAG$( openssl rand -hex 8 )"
		echo $ZONENAME > $LASTCONTAINER
		# create a new container
		echo "Create zone $ZONENAME"
		zonecfg -z $ZONENAME create 2>&1 >/dev/null
		echo -n "select anet lower-link=auto\nset lower-link=dockerint0\nend\n" | zonecfg -z $ZONENAME
		sed "s/__NODENAME__/$ZONENAME/" $PROFILES/default.xml > /tmp/manifest.$ZONENAME.xml
		if [ "$( zoneadm -z $CLONESRC list -p 2>/dev/null | cut -f3 -d: )" != "installed" ]; then
			echo "Installing the image before cloning (180 sec)"
			zonecfg -z $CLONESRC create
			zoneadm -z $CLONESRC install -a $IMAGES/$CLONESRC.uar 2>&1 >/dev/null
		fi
		echo "cloning the image (10 sec)"
		zoneadm -z $ZONENAME clone -c /tmp/manifest.$ZONENAME.xml $CLONESRC 2>&1 >/dev/null
		# start the container
		echo "Boot the zone (15 sec)"
		zoneadm -z $ZONENAME boot
		# wait milestone
		echo "Waiting the zone to be ready (180 sec) - milestone $MILESTONE"
		wait_online $ZONENAME $MILESTONE 
		sleep 5 # for network
		# add lastrun attribute
		echo -e "add attr\nset name=lastrun\nset type=uint\nset value=$(date +%s)\nend\ncommit\n" | \
			zonecfg -z $ZONENAME
		echo -e "add attr\nset name=image\nset type=string\nset value=\"$IMAGE\"\nend\ncommit\n" | \
			zonecfg -z $ZONENAME
		# run the process inside unsing zlogin
		echo "Run process inside the zone"
		echo "---------------------------"
		zlogin -S $ZONENAME $@
		echo "---------------------------"
		# finaly stop the zone unless -d option
		if [ -z "$DEAMON" ]; then
			echo "Halting the zone (5 sec)"
			zoneadm -z $ZONENAME halt
		fi
		;;
	ps)
		if [ "$2" == "-a" -o "$2" == "-l" ]; then OPT="-i" ;fi
		if [ "$2" == "-l" ]; then TAIL=-1; else TAIL=-100; fi
		CONTAINERS=$( zoneadm list $OPT -v | awk "/$CONTAINERTAG/{print \$2}")
		[ -z "$CONTAINERS" ] && exit 0
		echo "ID                   IMAGE                CREATED(EPOCH)       STATE"
		for CONTAINER in $CONTAINERS; do
			LASTRUN=$( zonecfg -z $CONTAINER info attr name=lastrun 2>/dev/null | \
				perl -nle 'print $1 if /value: (\d+)/' )
			IMAGE=$( zonecfg -z $CONTAINER info attr name=image 2>/dev/null | \
				perl -nle 'print $1 if /value: (\S+)/' )
			STATE=$( zoneadm -z $CONTAINER list -p | cut -f3 -d: )
			printf "%-20s %-20s %-20s %s\n" $(echo $CONTAINER | sed 's/DC_//') \
				$IMAGE $LASTRUN $STATE
		done | sort -k 3 | tail $TAIL
		;;
	start)
		[ -z "$2" ] && exit 1
		CONTAINER=$2
		zoneadm -z $CONTAINERTAG$CONTAINER boot
		;;
	stop)
		[ -z "$2" ] && exit 1
		CONTAINER=$2
		zoneadm -z $CONTAINERTAG$CONTAINER shutdown
		;;
	kill)
		[ -z "$2" ] && exit 1
		CONTAINER=$2
		zoneadm -z $CONTAINERTAG$CONTAINER halt
		;;
	rm)
		[ -z "$2" ] && exit 1
		CONTAINER=$2
		ZONENAME="$CONTAINERTAG$CONTAINER"
		zoneadm -z $ZONENAME uninstall -F
		zonecfg -z $ZONENAME delete -F
		;;
	rmi)
		[ -z "$2" ] && exit 1
		IMAGE=$2
		ZONENAME=`dockerid2zonename $IMAGE`
		[ -f $IMAGES/$ZONENAME.uar ] && rm $IMAGES/$ZONENAME.uar
		;;
	commit)
		[ -z "$2" -o -z "$3" ] && exit 1
		CONTAINER=$2
		IMAGE=$3
		ZONENAME="$CONTAINERTAG$CONTAINER"
		ARCHNAME=`dockerid2zonename $IMAGE`
		echo "Creating unified archive (200 sec)"
		archiveadm create -z $ZONENAME -e $IMAGES/$ARCHNAME.uar 2>&1 >/dev/null
		echo "$IMAGE ($ARCHNAME.uar)"
		echo "$IMAGE ($ARCHNAME.uar)" > $IMAGES/$ARCHNAME.desc
		echo "$IMAGE ($ARCHNAME.desc)"
		;;
	inspect)
		[ -z "$2" ] && exit 1
		CONTAINER=$2
		ZONENAME="$CONTAINERTAG$CONTAINER"
		zonecfg -z $ZONENAME info
		;;
	push)
		[ -z "$2" ] && exit 1
		IMAGE=$2
		ZONENAME=`dockerid2zonename $IMAGE`
		echo "Pushing $IMAGE to repository"
		mkdir -p $REPO/`dirname $IMAGE`
		cp $IMAGES/$ZONENAME.uar $REPO/$IMAGE.uar
		cp $IMAGES/$ZONENAME.desc $REPO/$IMAGE.desc
		;;
		
	*)
		echo "Docker for Solaris version 0.0.1"
		echo "Commands:"
		echo " version"
		echo " images"
		echo " search"
		echo " pull IMAGE"
		echo " run [-d] IMAGE CMD"
		echo " rm CONTAINER"
		echo " rmi IMAGE"
		echo " ps [-a]"
		echo " commit CONTAINER IMAGE"
		echo " inspect CONTAINER"
		;;
esac
